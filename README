Vasilescu Andrei
Grupa 324 CD

Am rezolvat toate task-urile:
- Procesul de dirijare
- Longest Prefix Match
- Protocolul ARP
- Protocolul ICMP

Pentru gasirea longest prefix match-ului am folosit implementarea cu arborele Trie. Astfel la inceputul main-ului am citit intr-un vector intrarile din tabela de rutare,
iar apoi am creat arborele Trie (Am luat fiecare intrare din tabela de rutare si in functie de un bit de 0 sau 1 din adresa din prefix, ma duceam in arbore spre copilul
stang respectiv spre copilul drept, creand nodul respectiv daca este cazul. De asemenea se va shifta atat prefixul cat si masca cu un bit, la fiecare intrare in bucla 
while folosita, ce se va termina atunci cand masca isi va termina bitii de 1, in urma shiftarilor. La terminarea acestei bucle se va pune toata intrarea din tabela in campul
de valoare a nodului unde am ramas cu parcurgerea. Deci o intrare din tabela se va gasi intr-un nod la adancimea egala cu lungimea mastii din intrare.) De asemenea, am mai implementat o 
functie ce parcurge arborele Trie si gaseste cel mai lung prefix corespunzator. In aceasta functie se va verifica daca bit-ul din ip-ul cautat este 0 sau 1 si se va parcurge
arborele corespunzator valorii (spre copilul din stanga respectiv spre cel din dreapta). La fiecare nod pe care ajungem se verfica daca exista o valoare in acel nod pentru ca
aceasta poate fi un posibil match. Totusi parcurgerea nu se opreste la primul nod care nu are o valoare NULL deoarece cautam cel mai lung prefix deci o sa ne ducem cat mai adanc
in arbore, iar ultimul nod de pe calea noastra ce contine o valoare va fi de fapt match-ul corect (inseamna ca are cea mai lunga masca). 

In bucla in care se primesc incontinuu pachete se va verifica dupa primirea unui pachet daca acesta este de tip IPV4 sau ARP, altfel acesta va fi aruncat. 

*** CAZUL IPV4 ***
In cazul in care a fost primit un pachet IPV4 voi recalcula din nou checksum-ul si voi verifica daca este egal cu checksum-ul cu care a venit pachetul. In cazul in care
nu sunt egale se va arunca pachetul, deoarece inseamna ca a fost corupt, altfel programul va continua. Se va verifica daca ip-ul destinatie a pachetului este chiar ip-ul router-ului,
iar in acest caz se va verifica daca este vorba despre un ICMP Echo (Ping) Request si astfel se va trimite inapoi catre sursa pachetului un Echo Reply, schimband in header-ul
ICMP al pachetului primit campul referitor la tip, pentru ca pachetul sa se identifice ca un reply. Daca ip-ul destinatie nu este cel al router-ului, ineamna ca pachetul trebuie
dirijat mai departe, se va scadea TTL-ul cu 1 si se va verifica daca acesta este mai mic sau egal cu 1. Daca TTL-ul este mai mic sau egal cu 1, se va trimite un mesaj ICMP inapoi
spre sursa de tip "Time Exceeded" creand separat headerele: Ethernet, IPV4 si ICMP cu valorile corespunzatoare mesajului si apoi se vor lega headerele in memorie folosind
"memcpy" la adresa de memorie la care pointeaza un pointer, in urma alocarii memoriei necesare acestui tip de pachet. In final se va trimite mesajul ICMP si se va astepta un nou
pachet. Daca cazul cu TTL-ul prea mic nu se valideaza se va cauta in arborele Trie, folosind functia descrisa in primul paragraf, match-ul corect pentru adresa ip destinatie
a pachetului, pentru a putea dirija corect pachetul. Daca totusi nu s-a gasit niciun match in arbore, se va trimite inapoi spre sursa pachetului un mesaj ICMP de tip
"Destination Unreachable" dupa aceeasi metoda ca si cea descrisa anterior pentru mesajul de "Time Exceeded", fiind diferita doar valoarea de la tipul din header-ul ICMP si
se va astepta urmatorul pachet. Daca s-a gasit un match in arborele Trie se va updata checksum-ul in urma scaderii TTL-ului si se va cauta in tabela ARP dinamica creata cu
ajutorul unei liste cu elemente de tip "arp_entry" cu un IP si un MAC. Daca s-a gasit IP-ul next_hopului in tabela ARP dinamica se va lua MAC-ul de acolo si se va updata
campul din header-ul Ethernet referitor la adresa destinatie cu adresa MAC gasita, dar si cea sursa cu ajutorul functiei get_interface_mac avand ca prim paramteru interfata din
intrarea din tabel gasita in arborele Trie in urma cautarii match-ului. Daca nu s-a gasit adresa IP a next_hopului in tabela ARP se vor crea un header Ethernet si unul ARP iar apoi
se vor lega in memorie pentru a se gasi unul dupa celalalt la o adresa de memorie continua, ajutand la trimiterea pachetului. De asemenea se va pune intr-o coada pachetul a carui adresa
MAC destinatie nu o cunoastem. In header-ul Ethernet va fi pusa la adresa MAC destinatie adresa de broadcast FF:FF:FF:FF:FF:FF, iar la adresa sursa mac-ul interfetei din intrarea 
din tabela gasita in arborele Trie. In header-ul ARP se vor pune valorile corespunzatoare in campurile din structura, fiind special faptul ca la campul "op" va fi valoarea 1 
semnificand ca este un ARP Request. Apoi se va adauga in tabela ARP dinamica (in lista) o intrare noua cu IP-ul next_hopului dar cu MAC-ul inca necunoscut si se va trimite ARP Request-ul.


*** CAZUL ARP ***
Vor fi doar doua cazuri cel in care s-a primit un ARP Reply sau un ARP Request verificandu-se astfel valoare din campul "op" (1 sau 2 pentru Request sau Reply). In cazul in care
am primit un ARP Reply inseamna ca este corepunzator unui ARP Request trimis de router anterior. Astfel vom lua din acest Reply adresa MAC pe care o cautam ce se va gasi in campul
de adresa MAC sursa. Voi da dequeue pentru a lua ultimul pachet bagat in coada a carui adresa destinatie inca nu o cunosteam si ii vom updata campul a carui valoare nu o stiam
cu adresa primita in Reply. Apoi vom cauta in arborele Trie match-ul corespunzator adresei IP destinatie din pachet si vom lua din intrarea gasita, interfata, pentru a sti
pe ce interfata trimitem pachetul IPV4 mai departe. De asemenea, se va updata in tabela ARP dinamica la intrarea cu IP-ul necunoscut, campul referitor la MAC cu MAC-ul din ARP Reply
pentru a fi de folos la viitoare cautari. In final vom trimite pachetul scos din coada cu campul destinatie updatat, mai departe pe interfata corecta.

In cazul in care pachetul ARP primit este un ARP Request va trebui ca router-ul sa trimita inapoi un Reply. Astfel, voi crea un header Ethernet si unul ARP iar apoi le voi pune
unul dupa celalalt intr-o zona de memorie alocata pentru a le putea trimite cu usurinta in final. In headere voi pune corect adresele IP si MAC si voi pune in adresa MAC sursa,
adresa MAC a interfetei corespunzatoare adresei IP de unde am primit Request-ul, pentru a putea trimite Reply-ul inapoi spre acelasi host. In final, dupa ce am setat toate campurile
corect, inclusiv cel de "op" cu valoarea 2 (Reply) se va trimite Reply-ul pe interfata corecta.